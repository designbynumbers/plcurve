This is the plCurve library, designed for working with piecewise linear
(not necessarily connected) R^3 curves.  It also includes vector-handling
routines and some basic support for spline equivalents of the plCurves.

New in library versions 7.0.1 (and later), this includes the functionality
of the previous octrope library for computing the thickness and ropelength
of polygonal curves.

Installation
============

On Mac OS X
-----------

1. Install the XCode command line tools: `xcode-select --install`
2. Install Homebrew: Info at http://brew.sh/
3. Install gsl: `brew install gsl`
4. Install pip Python package manager: https://pip.pypa.io/en/stable/installing/
5. Install numpy: `sudo pip install numpy`
6. Run configure: `./configure`
7. Make: `make`
8. Run the C tests: `make check`
9. Install: `make install` or possibly `sudo make install`

(Suggested): Install ipython: `sudo pip install ipython`
Ipython is a more user-friendly Python console

10. Build doc: `make html`

On Amazon Linux (such as AWS)
----------------------

1. Install the development tools: `sudo yum groupinstall "Development Tools"`
2. Install gsl: `sudo yum install gsl-devel`
3. Install numpy: `sudo pip install numpy`
4. Configure: `./configure`
5. Make: `make`
6. Run the C tests: `make check`
7. Install: `sudo make install`

At this point you may need to add /usr/local/lib to the ld path.
8. Create a file `local.conf` in /etc/ld.so.conf.d/ and give it the
one line, `/usr/local/lib`. You need to be SU for this; typically
`sudo nano /etc/ld.so.conf.d/local.conf` is a fine editor command.
9. `sudo ldconfig` to update the ld configuration cache

(Suggested): Install ipython: `sudo pip install ipython`
Ipython is a more user-friendly Python console

10 Build doc: `make html`

`make check` occasionally failing
=================================

This is okay! There are some random test cases which are run during a
`make check`. We expect the failure rate of `ccode_test` to be under
3%; when this happens there will be a message in
`%BUILD_DIR%/test/ccode_test.log`:

    FAIL
    unable to generate pd code from plcurve
    !! this is *expected* to happen 2.5% of the time
    !! see the README for more information

If you believe that you are seeing this error message more often than
expected, please get in touch with the maintainers. See below for more
details.

We know that there will be some cases in which `randomwalk_test()` (a
test that runs during `ccode_test`) will fail to project to a pdcode
object; principle among reasons are those in which edges of the random
polygon generated are self-intersecting (in which case we would be
unable to determine the sign of that given crossing in constructing
the pdcode object).

Based on a run of the program in `test/randomwalk_test_test.c`, the
expected success rate of a given loop run in randomwalk_test() run on
random polygons with 250 edges is about 999974 in 1000000
(99.9974%). Hence, the expected failure probability of a given random
250-gon is 2.6e-5.

In `ccode_test`, `randomwalk_test()` is called to process 1001 random
250-gons into pdcode objects. If a single loop 'fails', the entire
test 'fails'. Based on the prior run of this program, we estimate (as
of March 2016) that this step should fail about 97.431% of the time,
or about 3-in-100 times.


Python Module `libpl`
=====================

plCurve comes with a Python module for accessing and manipulating
plCurve objects from Python scripts. Presently, the most robust part
of this module is the `pdcode` submodule that makes available most of
the functionality of `pdcode`s and other features in `plctopology.h`.

Running configure will try to find the necessary libraries to build
the Python module. To disable these checks and the Python building,
pass `--disable-python` to the configure script. Required is Python
2.7 (and associated development headers) and Numpy. Optional but
recommended is Cython 0.23+ (Cython is required for development
builds). If Cython is installed but you would prefer not to use it,
pass `--disable-cython` to the configure script.

The Python module by default, will try to install the Python module
to your system's Python module directory (Python itself determines
this). This usually requires superuser privileges. Passing
`--enable-python-otherdir=user` will instead install the module to the
directory which Python has determined to be a user's personal Python
module directory. Either of these choices are typically already on
Python's PYTHONPATH, and should not require additional
configuration. In some circumstances, it may be preferable to install
the Python module specifically to the prefix determined by the
configure script; `--enable-python-otherdir=prefix` enables this
functionality, but be aware that Python may not search this location
for modules by default (Macs in particular get confused by this).

Python documentation gets built automatically from docstrings
available in the module. This requires Sphinx, a Python documentation
package. After installing the `libpl` module, the make command `make
html` will build the documentation and place it in
`BUILD_DIR/pysrc/built_doc`.

Some features of the Python module require the external packages
Spherogram and PLink (available at http://www.math.uic.edu/t3m/), but
these packages are not required in general. It is listed in the
docstrings (and documentation) of functions which require these
modules.
